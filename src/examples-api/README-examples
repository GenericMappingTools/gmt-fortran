$Id$

List of examples of GMT Fortran API (src/examples-api)
======================================================
*.bat: Linux/Windows scripts
*.c:   C codes tested with Linux/Windows GNU C, Intel C, PGI C
*.f90: Fortran codes tested with Linux/Windows GNU Fortran, g95, Intel Fortran, PGI Fortran (require gmt.f90)
Make.inc in src/examples-api: compiler names and flags
Makefile in src/examples-api: to compile all examples
Makefile in src/examples-api/ex*: to compile all examples in the selected directory
See "How to compile and run examples" below.

Example 01: psxy/ps2raster with 2D data
---------------------------------------
Examples of basic usage of three flavours of GMT Fortran API: subroutines, functions and interfaces. psxy followed by ps2raster is used for plotting 2D data that is imported from a two-column file ex01-xy.dat or two user arrays. All examples prepare output files ex01.ps and ex01.png.

ex01.bat
Simple Linux/Windows shell script. Input data prepared by gmtmath call within the script and saved as file ex01-xy.dat.

ex01a.c, ex01a*.f90 (executables c01a, f01a*)
Session opened, modules psxy and ps2raster called, session destroyed. Input data specified as files by module arguments. Requires ex01-xy.dat (made by shell script ex01.bat).
- ex01a1.f90
Calls to API subroutines sGMT_* with optional arguments, default API session, no error checking. sGMT super-wrapper to sGMT_Call_Module is used.
- ex01a2.f90
Calls to API subroutines sGMT_* with error checking.
- ex01a3.f90
API functions GMT_* used in print statements, optional arguments, default API session, fGMT/GMTF super-wrapper functions.
- ex01a4.f90
API functions GMT_* called with all arguments, explicit API session, error checking. Very close to the GMT C API style.
- ex01a5.f90
Direct calls to cGMT_* interfaces to the GMT C API library. Requires explicit use of iso_c_binding machinery (c_ptr, c_null_char and more in more complex cases).

ex01b.c, ex01b*.f90 (executables c01b, f01b*)
Similar to ex01a but input data imported from user arrays.
- ex01b1.f90
Calls to API subroutines, default API session, no error checking. User arrays imported into GMT_VECTOR structure and encoded into a virtual filename in one single step by the initialization subroutine sGMT_Create_Init_Encode.
- ex01b2.f90
Calls to API functions, default API session, error checking. GMT_VECTOR structure created, user arrays imported and a virtual filename encoded in several steps with help of the initialization subroutine sGMT_Init_Vector.

ex01c.c, ex01c*.f90 (executables c01c, f01c*)
Similar to ex01a but input data imported from files by API calls. Optionally, data from the GMT_DATASET struct are accessed. (Fortran: several c_f_pointer calls are needed to resolve struct ** components, g95 0.93 and PGI 14.2 fail to do that.)
- ex01c1.f90
One-step data import from a file by GMT_Read_Data, followed by registration and encoding a virtual filename.
- ex01c2.f90
Three-step data import from a file by GMT_Register_Data, GMT_Init_IO and GMT_Get_Data.

ex01d.c, ex01d*.f90 (executables c01d, f01d*)
Similar to ex01b but runtime messages generated by API calls.
- ex01d1.f90
With API subroutine sGMT_Message for unconditional messages.
- ex01d2.f90
With API subroutine sGMT_Report for messages conditioned by verbosity level.

Example 02: pscoast/psxy/pstext with 2D data and text
-----------------------------------------------------
Examples of a sequence of calls to API modules for 2D data. pscoast is used for plotting a projected globe, a line with end-point symbols is added by double call to psxy and some text written by pstext, all followed by ps2raster. Input data is imported from ex02-line.dat or user arrays and from ex02-text.dat. All examples prepare output files ex02.ps and ex02.png.

ex02.bat
Linux/Windows shell script. Input data specified as files by module arguments. Requires ex02-line.dat and ex02-text.dat.

ex02a.c, ex02a.f90 (executables c02a, f02a)
Input data specified as files by module arguments. Requires ex02-line.dat and ex02-text.dat.

ex02b.c, ex02b.f90 (executables c02b, f02b)
Input data for a line and symbols imported from user arrays by sGMT_Init_Vector, text data specified by module arguments. Requires ex02-text.dat. 

Notes. As of GMT 5.1.1, plotting a line from the GMT_VECTOR fails. The preventive attempt to duplicate the GMT_VECTOR by GMT_Duplicate_Data fails as well, thus the sequence to create and initialize the GMT_VECTOR is duplicated instead.

Example 03: xyz2grd/makecpt/psbasemap/grdimage/grdcontour/psscale with 3D data
------------------------------------------------------------------------------
Examples of a sequence of calls to API modules for 3D data. Some data is needed more than once, some is written and then read again, and that all requires special handling. xyz2grd is used to create a grid from 3D data (a three-column file or three user arrays) and makecpt to create a color palette table. The grid is then processed by grdimage and grdcontour to receive a map with isolines and psscale is used to attach a color-scale box. Input data is imported from ex03-xyz.dat or user arrays. All examples prepare output files ex03.ps and ex03.png.

ex03.bat
Linux/Windows shell script. Input data specified as files by module arguments. Requires ex03-xyz.dat. 

ex03a.c, ex03a.f90 (executables c03a, f03a)
Session opened, modules xyz2grd, makecpt, psbasemap, grdimage, grdcontour and psscale called, session destroyed. Input data imported from user arrays. GRD and CPT saved as files and referenced by module arguments.

ex03b.c, ex03b.f90 (executables c03b, f03b)
Similar to ex03a. GRD and CPT created internally by API, re-registered for input and used later.

ex03-xyz.f90
Fortran source to generate ex03-xyz.dat.

Notes. While the need to re-register written data (grd, cpt) for reading seems appropriate, the requirement to re-register data in memory for repeated reading, cf. http://gmt.soest.hawaii.edu/boards/2/topics/157, sounds excessively. Moreover, as of GMT 5.1.1, if the grid created in ex03b is re-registered for repeated use (or, alternatively, if GMT_IS_REFERENCE+GMT_IO_RESET is used within the first registration), the grdcontour result is broken. Grd duplication by GMT_Duplicate_Data is needed for correct results. Using cpt repeatedly works well.

How to compile and run examples
-------------------------------
1. (Linux/Windows) scripts *.bat
   if required, check or prepare input data; run scripts
2. C sources *.c
   edit Make.inc; compile C sources via make; run executables
   Make.inc - edit path to GMT library (Linux/Windows): GMT_L, GMT_W
            - edit compiler name and compiler and linker options: CC, CCFLAGS, LIBS
   run make - compile all examples by 'make' or 'make all', or 'make C'
            - or compile particular examples by, e.g., 'make c01a'
            - clean up by 'make clean'
   run executables
3. Fortran sources *.f90
   edit Make.inc; compile Fortran sources via make; run executables
   Make.inc - edit path to GMT library (Linux/Windows): GMT_L, GMT_W
            - edit compiler name and compiler and linker options: FC, FCFLAGS, LIBS
   run make - compile all examples by 'make' or 'make all', or 'make F' or 'make Fortran'
            - or compile particular examples by, e.g., 'make f01a'
            - clean up by 'make clean'
   run executables

Additional notes
----------------
- Windows PGI compilers may expect library names libgmt.lib and libpsl.lib (names of installed files are gmt.lib and psl.lib)
- PGI C compiler reports a warning: PGC-W-0221-Redefinition of symbol SIZE_MAX
- PGI Fortran compiler reports an info: PGF90-I-0035-Predefined intrinsic dim loses intrinsic property
- g95 has limited (sometimes sufficient) support for c_f_pointer subroutine and unimplemented private components of derived types
